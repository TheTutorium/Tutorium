// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using tutorium.Data;

#nullable disable

namespace TutoriumApi.Migrations
{
    [DbContext(typeof(TutoriumContext))]
    [Migration("20221217225037_ThirdOne")]
    partial class ThirdOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("tutorium.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("AffilatedStudentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CanceledBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedCourseId");

                    b.HasIndex("AffilatedStudentId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedCourseId = 1,
                            AffilatedStudentId = 1,
                            Date = new DateTime(2023, 2, 15, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AffilatedCourseId = 2,
                            AffilatedStudentId = 2,
                            Date = new DateTime(2023, 1, 15, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AffilatedCourseId = 2,
                            AffilatedStudentId = 2,
                            Date = new DateTime(2023, 1, 20, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AffilatedCourseId = 3,
                            AffilatedStudentId = 3,
                            Date = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("tutorium.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedTutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Subject")
                        .HasColumnType("integer");

                    b.Property<int>("VerifiedStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedTutorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedTutorId = 4,
                            Description = "MAT101 Veriyorum",
                            Duration = 60,
                            Name = "MAT101",
                            Subject = 1,
                            VerifiedStatus = 0
                        },
                        new
                        {
                            Id = 2,
                            AffilatedTutorId = 4,
                            Description = "TOEFL Veriyorum",
                            DocumentPath = "/fake/path",
                            Duration = 90,
                            ExpirationDate = new DateTime(2023, 2, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TOEFL",
                            Subject = 0,
                            VerifiedStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            AffilatedTutorId = 4,
                            Description = "GRE Veriyorum",
                            DocumentPath = "/fake/path",
                            Duration = 30,
                            ExpirationDate = new DateTime(2023, 3, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GRE",
                            Subject = 0,
                            VerifiedStatus = 3
                        });
                });

            modelBuilder.Entity("tutorium.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedCourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedCourseId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedCourseId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "dasdas",
                            DisplayName = "adsdas",
                            FilePath = "/File/Path/Fake",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AffilatedCourseId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "dasdas",
                            DisplayName = "adsdas",
                            FilePath = "/File/Path/Fake",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AffilatedCourseId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "dasdas",
                            DisplayName = "adsdas",
                            FilePath = "/File/Path/Fake",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("tutorium.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("AffilatedStudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedCourseId");

                    b.HasIndex("AffilatedStudentId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedCourseId = 1,
                            AffilatedStudentId = 1,
                            Comment = "Kotu",
                            CreatedAt = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 9.8m,
                            UpdatedAt = new DateTime(2024, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AffilatedCourseId = 2,
                            AffilatedStudentId = 1,
                            Comment = "Iyi",
                            CreatedAt = new DateTime(2023, 4, 30, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 6.8m
                        },
                        new
                        {
                            Id = 3,
                            AffilatedCourseId = 2,
                            AffilatedStudentId = 3,
                            Comment = "Vasat",
                            CreatedAt = new DateTime(2023, 5, 30, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4.8m
                        });
                });

            modelBuilder.Entity("tutorium.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("text");

                    b.Property<bool>("EmailVerifiedStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneVerificationCode")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneVerifiedStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("tutorium.Models.WhiteboardSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedBookingId")
                        .HasColumnType("integer");

                    b.Property<string>("SavePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SaveTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedBookingId");

                    b.ToTable("WhiteboardSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedBookingId = 1,
                            SavePath = "/File/Path/Fake",
                            SaveTime = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AffilatedBookingId = 3,
                            SavePath = "/File/Path/Fake",
                            SaveTime = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AffilatedBookingId = 3,
                            SavePath = "/File/Path/Fake",
                            SaveTime = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("tutorium.Models.Student", b =>
                {
                    b.HasBaseType("tutorium.Models.User");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "baris@student",
                            EmailVerifiedStatus = true,
                            FirstName = "Baris Ogun",
                            LastName = "Yoruk",
                            PasswordHash = new byte[] { 188, 148, 137, 114, 81, 86, 147, 64, 196, 245, 250, 39, 221, 205, 21, 148, 231, 82, 51, 94, 155, 82, 24, 111, 11, 85, 7, 218, 209, 87, 127, 53, 198, 240, 149, 164, 241, 201, 68, 122, 117, 175, 48, 225, 179, 117, 206, 38, 180, 23, 78, 17, 62, 62, 0, 75, 207, 229, 17, 16, 80, 55, 82, 156 },
                            PasswordSalt = new byte[] { 159, 77, 239, 129, 174, 4, 82, 122, 143, 11, 162, 134, 80, 28, 217, 217, 147, 3, 233, 27, 209, 139, 60, 212, 175, 116, 125, 254, 8, 60, 30, 202, 96, 246, 46, 222, 119, 239, 33, 15, 155, 63, 121, 219, 32, 13, 248, 53, 132, 5, 159, 122, 194, 47, 18, 80, 229, 71, 158, 241, 250, 78, 198, 159, 181, 198, 199, 136, 20, 22, 28, 41, 175, 183, 134, 98, 220, 137, 195, 212, 181, 153, 75, 40, 154, 102, 234, 124, 24, 150, 226, 154, 17, 124, 177, 150, 101, 147, 254, 167, 18, 208, 83, 8, 125, 77, 226, 142, 89, 233, 45, 1, 188, 82, 133, 32, 98, 35, 152, 55, 28, 149, 96, 5, 175, 90, 184, 214 },
                            Phone = "00905075711001",
                            PhoneVerifiedStatus = true
                        },
                        new
                        {
                            Id = 2,
                            Email = "cagri@student",
                            EmailVerifiedStatus = true,
                            FirstName = "Mustafa Cagri",
                            LastName = "Durgut",
                            PasswordHash = new byte[] { 188, 148, 137, 114, 81, 86, 147, 64, 196, 245, 250, 39, 221, 205, 21, 148, 231, 82, 51, 94, 155, 82, 24, 111, 11, 85, 7, 218, 209, 87, 127, 53, 198, 240, 149, 164, 241, 201, 68, 122, 117, 175, 48, 225, 179, 117, 206, 38, 180, 23, 78, 17, 62, 62, 0, 75, 207, 229, 17, 16, 80, 55, 82, 156 },
                            PasswordSalt = new byte[] { 159, 77, 239, 129, 174, 4, 82, 122, 143, 11, 162, 134, 80, 28, 217, 217, 147, 3, 233, 27, 209, 139, 60, 212, 175, 116, 125, 254, 8, 60, 30, 202, 96, 246, 46, 222, 119, 239, 33, 15, 155, 63, 121, 219, 32, 13, 248, 53, 132, 5, 159, 122, 194, 47, 18, 80, 229, 71, 158, 241, 250, 78, 198, 159, 181, 198, 199, 136, 20, 22, 28, 41, 175, 183, 134, 98, 220, 137, 195, 212, 181, 153, 75, 40, 154, 102, 234, 124, 24, 150, 226, 154, 17, 124, 177, 150, 101, 147, 254, 167, 18, 208, 83, 8, 125, 77, 226, 142, 89, 233, 45, 1, 188, 82, 133, 32, 98, 35, 152, 55, 28, 149, 96, 5, 175, 90, 184, 214 },
                            Phone = "0000000000000",
                            PhoneVerifiedStatus = true
                        },
                        new
                        {
                            Id = 3,
                            Email = "oguzhan@student",
                            EmailVerificationCode = "1234",
                            EmailVerifiedStatus = false,
                            FirstName = "Oguzhan",
                            LastName = "Ozcelik",
                            PasswordHash = new byte[] { 188, 148, 137, 114, 81, 86, 147, 64, 196, 245, 250, 39, 221, 205, 21, 148, 231, 82, 51, 94, 155, 82, 24, 111, 11, 85, 7, 218, 209, 87, 127, 53, 198, 240, 149, 164, 241, 201, 68, 122, 117, 175, 48, 225, 179, 117, 206, 38, 180, 23, 78, 17, 62, 62, 0, 75, 207, 229, 17, 16, 80, 55, 82, 156 },
                            PasswordSalt = new byte[] { 159, 77, 239, 129, 174, 4, 82, 122, 143, 11, 162, 134, 80, 28, 217, 217, 147, 3, 233, 27, 209, 139, 60, 212, 175, 116, 125, 254, 8, 60, 30, 202, 96, 246, 46, 222, 119, 239, 33, 15, 155, 63, 121, 219, 32, 13, 248, 53, 132, 5, 159, 122, 194, 47, 18, 80, 229, 71, 158, 241, 250, 78, 198, 159, 181, 198, 199, 136, 20, 22, 28, 41, 175, 183, 134, 98, 220, 137, 195, 212, 181, 153, 75, 40, 154, 102, 234, 124, 24, 150, 226, 154, 17, 124, 177, 150, 101, 147, 254, 167, 18, 208, 83, 8, 125, 77, 226, 142, 89, 233, 45, 1, 188, 82, 133, 32, 98, 35, 152, 55, 28, 149, 96, 5, 175, 90, 184, 214 },
                            Phone = "0000000000000",
                            PhoneVerifiedStatus = true
                        });
                });

            modelBuilder.Entity("tutorium.Models.Tutor", b =>
                {
                    b.HasBaseType("tutorium.Models.User");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Tutor");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "ozgur@tutor",
                            EmailVerifiedStatus = true,
                            FirstName = "Halil Ozgur",
                            LastName = "Demir",
                            PasswordHash = new byte[] { 188, 148, 137, 114, 81, 86, 147, 64, 196, 245, 250, 39, 221, 205, 21, 148, 231, 82, 51, 94, 155, 82, 24, 111, 11, 85, 7, 218, 209, 87, 127, 53, 198, 240, 149, 164, 241, 201, 68, 122, 117, 175, 48, 225, 179, 117, 206, 38, 180, 23, 78, 17, 62, 62, 0, 75, 207, 229, 17, 16, 80, 55, 82, 156 },
                            PasswordSalt = new byte[] { 159, 77, 239, 129, 174, 4, 82, 122, 143, 11, 162, 134, 80, 28, 217, 217, 147, 3, 233, 27, 209, 139, 60, 212, 175, 116, 125, 254, 8, 60, 30, 202, 96, 246, 46, 222, 119, 239, 33, 15, 155, 63, 121, 219, 32, 13, 248, 53, 132, 5, 159, 122, 194, 47, 18, 80, 229, 71, 158, 241, 250, 78, 198, 159, 181, 198, 199, 136, 20, 22, 28, 41, 175, 183, 134, 98, 220, 137, 195, 212, 181, 153, 75, 40, 154, 102, 234, 124, 24, 150, 226, 154, 17, 124, 177, 150, 101, 147, 254, 167, 18, 208, 83, 8, 125, 77, 226, 142, 89, 233, 45, 1, 188, 82, 133, 32, 98, 35, 152, 55, 28, 149, 96, 5, 175, 90, 184, 214 },
                            Phone = "0000000000000",
                            PhoneVerifiedStatus = true,
                            Description = "Selamlar"
                        },
                        new
                        {
                            Id = 5,
                            Email = "yusuf@tutor",
                            EmailVerifiedStatus = true,
                            FirstName = "Yusuf Mirac",
                            LastName = "Uyar",
                            PasswordHash = new byte[] { 188, 148, 137, 114, 81, 86, 147, 64, 196, 245, 250, 39, 221, 205, 21, 148, 231, 82, 51, 94, 155, 82, 24, 111, 11, 85, 7, 218, 209, 87, 127, 53, 198, 240, 149, 164, 241, 201, 68, 122, 117, 175, 48, 225, 179, 117, 206, 38, 180, 23, 78, 17, 62, 62, 0, 75, 207, 229, 17, 16, 80, 55, 82, 156 },
                            PasswordSalt = new byte[] { 159, 77, 239, 129, 174, 4, 82, 122, 143, 11, 162, 134, 80, 28, 217, 217, 147, 3, 233, 27, 209, 139, 60, 212, 175, 116, 125, 254, 8, 60, 30, 202, 96, 246, 46, 222, 119, 239, 33, 15, 155, 63, 121, 219, 32, 13, 248, 53, 132, 5, 159, 122, 194, 47, 18, 80, 229, 71, 158, 241, 250, 78, 198, 159, 181, 198, 199, 136, 20, 22, 28, 41, 175, 183, 134, 98, 220, 137, 195, 212, 181, 153, 75, 40, 154, 102, 234, 124, 24, 150, 226, 154, 17, 124, 177, 150, 101, 147, 254, 167, 18, 208, 83, 8, 125, 77, 226, 142, 89, 233, 45, 1, 188, 82, 133, 32, 98, 35, 152, 55, 28, 149, 96, 5, 175, 90, 184, 214 },
                            Phone = "0000000000000",
                            PhoneVerificationCode = "1234",
                            PhoneVerifiedStatus = false,
                            Description = "Merhaba arkadaslar"
                        });
                });

            modelBuilder.Entity("tutorium.Models.Booking", b =>
                {
                    b.HasOne("tutorium.Models.Course", "AffilatedCourse")
                        .WithMany("Bookings")
                        .HasForeignKey("AffilatedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tutorium.Models.Student", "AffilatedStudent")
                        .WithMany("Bookings")
                        .HasForeignKey("AffilatedStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedCourse");

                    b.Navigation("AffilatedStudent");
                });

            modelBuilder.Entity("tutorium.Models.Course", b =>
                {
                    b.HasOne("tutorium.Models.Tutor", "AffilatedTutor")
                        .WithMany("Courses")
                        .HasForeignKey("AffilatedTutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedTutor");
                });

            modelBuilder.Entity("tutorium.Models.Material", b =>
                {
                    b.HasOne("tutorium.Models.Course", "AffilatedCourse")
                        .WithMany("Materials")
                        .HasForeignKey("AffilatedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedCourse");
                });

            modelBuilder.Entity("tutorium.Models.Review", b =>
                {
                    b.HasOne("tutorium.Models.Course", "AffilatedCourse")
                        .WithMany("Reviews")
                        .HasForeignKey("AffilatedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tutorium.Models.Student", "AffilatedStudent")
                        .WithMany("Reviews")
                        .HasForeignKey("AffilatedStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedCourse");

                    b.Navigation("AffilatedStudent");
                });

            modelBuilder.Entity("tutorium.Models.WhiteboardSave", b =>
                {
                    b.HasOne("tutorium.Models.Booking", "AffilatedBooking")
                        .WithMany("WhiteboardSaves")
                        .HasForeignKey("AffilatedBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedBooking");
                });

            modelBuilder.Entity("tutorium.Models.Booking", b =>
                {
                    b.Navigation("WhiteboardSaves");
                });

            modelBuilder.Entity("tutorium.Models.Course", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Materials");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("tutorium.Models.Student", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("tutorium.Models.Tutor", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
