// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using tutorium.Data;

#nullable disable

namespace TutoriumApi.Migrations
{
    [DbContext(typeof(TutoriumContext))]
    [Migration("20221211150625_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("tutorium.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("AffilatedStudentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CanceledBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedCourseId");

                    b.HasIndex("AffilatedStudentId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedCourseId = 1,
                            AffilatedStudentId = 1,
                            Date = new DateTime(2023, 2, 15, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AffilatedCourseId = 2,
                            AffilatedStudentId = 2,
                            Date = new DateTime(2023, 1, 15, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AffilatedCourseId = 2,
                            AffilatedStudentId = 2,
                            Date = new DateTime(2023, 1, 20, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AffilatedCourseId = 4,
                            AffilatedStudentId = 3,
                            Date = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("tutorium.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedTutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Subject")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedTutorId");

                    b.ToTable("Courses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Course");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedTutorId = 4,
                            Description = "MAT101 Veriyorum",
                            Duration = 60,
                            Name = "MAT101",
                            Subject = 6
                        },
                        new
                        {
                            Id = 2,
                            AffilatedTutorId = 4,
                            Description = "TOEFL Veriyorum",
                            Duration = 90,
                            Name = "TOEFL",
                            Subject = 3
                        },
                        new
                        {
                            Id = 3,
                            AffilatedTutorId = 4,
                            Description = "GRE Veriyorum",
                            Duration = 30,
                            Name = "GRE",
                            Subject = 3
                        });
                });

            modelBuilder.Entity("tutorium.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedCourseId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedCourseId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedCourseId = 1,
                            FilePath = "/File/Path/Fake"
                        },
                        new
                        {
                            Id = 2,
                            AffilatedCourseId = 1,
                            FilePath = "/File/Path/Fake"
                        },
                        new
                        {
                            Id = 3,
                            AffilatedCourseId = 2,
                            FilePath = "/File/Path/Fake"
                        });
                });

            modelBuilder.Entity("tutorium.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("AffilatedStudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2, 1)");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedCourseId");

                    b.HasIndex("AffilatedStudentId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedCourseId = 1,
                            AffilatedStudentId = 1,
                            Comment = "Kotu",
                            Rating = 9.8m
                        },
                        new
                        {
                            Id = 2,
                            AffilatedCourseId = 2,
                            AffilatedStudentId = 1,
                            Comment = "Iyi",
                            Rating = 6.8m
                        },
                        new
                        {
                            Id = 3,
                            AffilatedCourseId = 2,
                            AffilatedStudentId = 3,
                            Comment = "Vasat",
                            Rating = 4.8m
                        });
                });

            modelBuilder.Entity("tutorium.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("text");

                    b.Property<bool>("EmailVerifiedStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneVerificationCode")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneVerifiedStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("tutorium.Models.WhiteboardSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffilatedBookingId")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SaveTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AffilatedBookingId");

                    b.ToTable("WhiteboardSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AffilatedBookingId = 1,
                            ImagePath = "/File/Path/Fake",
                            SaveTime = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AffilatedBookingId = 3,
                            ImagePath = "/File/Path/Fake",
                            SaveTime = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AffilatedBookingId = 3,
                            ImagePath = "/File/Path/Fake",
                            SaveTime = new DateTime(2023, 3, 30, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("tutorium.Models.VerifableCourse", b =>
                {
                    b.HasBaseType("tutorium.Models.Course");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("text");

                    b.Property<bool>("VerifiedStatus")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("VerifableCourse");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AffilatedTutorId = 5,
                            Description = "YKS Mat Veriyorum",
                            Duration = 45,
                            Name = "YKS",
                            Subject = 6,
                            VerifiedStatus = false
                        },
                        new
                        {
                            Id = 5,
                            AffilatedTutorId = 5,
                            Description = "YKS Fizik Veriyorum",
                            Duration = 45,
                            Name = "YKS",
                            Subject = 8,
                            DocumentPath = "/File/Path/Fake",
                            VerifiedStatus = false
                        });
                });

            modelBuilder.Entity("tutorium.Models.Student", b =>
                {
                    b.HasBaseType("tutorium.Models.User");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "baris@student",
                            EmailVerifiedStatus = true,
                            FirstName = "Baris Ogun",
                            LastName = "Yoruk",
                            PasswordHash = new byte[] { 224, 245, 232, 129, 98, 114, 202, 238, 157, 60, 11, 63, 186, 24, 175, 189, 247, 87, 35, 81, 66, 73, 21, 254, 150, 39, 193, 143, 8, 20, 20, 158, 232, 63, 227, 138, 148, 40, 81, 98, 0, 73, 201, 133, 195, 229, 230, 76, 54, 29, 217, 43, 184, 244, 136, 134, 183, 149, 92, 163, 101, 58, 66, 180 },
                            PasswordSalt = new byte[] { 191, 9, 213, 80, 243, 112, 51, 218, 229, 187, 71, 50, 152, 106, 31, 128, 36, 130, 126, 215, 73, 74, 121, 47, 110, 217, 199, 15, 165, 28, 239, 11, 146, 177, 92, 28, 125, 138, 93, 139, 111, 181, 214, 216, 97, 202, 204, 125, 189, 177, 65, 230, 101, 238, 185, 182, 36, 84, 2, 45, 56, 198, 92, 74, 96, 137, 21, 63, 121, 106, 151, 88, 105, 213, 158, 160, 67, 108, 4, 136, 192, 32, 4, 85, 227, 61, 119, 197, 41, 0, 247, 214, 167, 169, 80, 17, 63, 194, 140, 225, 240, 170, 146, 227, 155, 129, 118, 55, 142, 79, 255, 6, 198, 17, 48, 60, 254, 171, 122, 168, 129, 226, 151, 196, 241, 15, 63, 200 },
                            Phone = "00905075711001",
                            PhoneVerifiedStatus = true
                        },
                        new
                        {
                            Id = 2,
                            Email = "cagri@student",
                            EmailVerifiedStatus = true,
                            FirstName = "Mustafa Cagri",
                            LastName = "Durgut",
                            PasswordHash = new byte[] { 224, 245, 232, 129, 98, 114, 202, 238, 157, 60, 11, 63, 186, 24, 175, 189, 247, 87, 35, 81, 66, 73, 21, 254, 150, 39, 193, 143, 8, 20, 20, 158, 232, 63, 227, 138, 148, 40, 81, 98, 0, 73, 201, 133, 195, 229, 230, 76, 54, 29, 217, 43, 184, 244, 136, 134, 183, 149, 92, 163, 101, 58, 66, 180 },
                            PasswordSalt = new byte[] { 191, 9, 213, 80, 243, 112, 51, 218, 229, 187, 71, 50, 152, 106, 31, 128, 36, 130, 126, 215, 73, 74, 121, 47, 110, 217, 199, 15, 165, 28, 239, 11, 146, 177, 92, 28, 125, 138, 93, 139, 111, 181, 214, 216, 97, 202, 204, 125, 189, 177, 65, 230, 101, 238, 185, 182, 36, 84, 2, 45, 56, 198, 92, 74, 96, 137, 21, 63, 121, 106, 151, 88, 105, 213, 158, 160, 67, 108, 4, 136, 192, 32, 4, 85, 227, 61, 119, 197, 41, 0, 247, 214, 167, 169, 80, 17, 63, 194, 140, 225, 240, 170, 146, 227, 155, 129, 118, 55, 142, 79, 255, 6, 198, 17, 48, 60, 254, 171, 122, 168, 129, 226, 151, 196, 241, 15, 63, 200 },
                            Phone = "0000000000000",
                            PhoneVerifiedStatus = true
                        },
                        new
                        {
                            Id = 3,
                            Email = "oguzhan@student",
                            EmailVerificationCode = "1234",
                            EmailVerifiedStatus = false,
                            FirstName = "Oguzhan",
                            LastName = "Ozcelik",
                            PasswordHash = new byte[] { 224, 245, 232, 129, 98, 114, 202, 238, 157, 60, 11, 63, 186, 24, 175, 189, 247, 87, 35, 81, 66, 73, 21, 254, 150, 39, 193, 143, 8, 20, 20, 158, 232, 63, 227, 138, 148, 40, 81, 98, 0, 73, 201, 133, 195, 229, 230, 76, 54, 29, 217, 43, 184, 244, 136, 134, 183, 149, 92, 163, 101, 58, 66, 180 },
                            PasswordSalt = new byte[] { 191, 9, 213, 80, 243, 112, 51, 218, 229, 187, 71, 50, 152, 106, 31, 128, 36, 130, 126, 215, 73, 74, 121, 47, 110, 217, 199, 15, 165, 28, 239, 11, 146, 177, 92, 28, 125, 138, 93, 139, 111, 181, 214, 216, 97, 202, 204, 125, 189, 177, 65, 230, 101, 238, 185, 182, 36, 84, 2, 45, 56, 198, 92, 74, 96, 137, 21, 63, 121, 106, 151, 88, 105, 213, 158, 160, 67, 108, 4, 136, 192, 32, 4, 85, 227, 61, 119, 197, 41, 0, 247, 214, 167, 169, 80, 17, 63, 194, 140, 225, 240, 170, 146, 227, 155, 129, 118, 55, 142, 79, 255, 6, 198, 17, 48, 60, 254, 171, 122, 168, 129, 226, 151, 196, 241, 15, 63, 200 },
                            Phone = "0000000000000",
                            PhoneVerifiedStatus = true
                        });
                });

            modelBuilder.Entity("tutorium.Models.Tutor", b =>
                {
                    b.HasBaseType("tutorium.Models.User");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Tutor");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "ozgur@tutor",
                            EmailVerifiedStatus = true,
                            FirstName = "Halil Ozgur",
                            LastName = "Demir",
                            PasswordHash = new byte[] { 224, 245, 232, 129, 98, 114, 202, 238, 157, 60, 11, 63, 186, 24, 175, 189, 247, 87, 35, 81, 66, 73, 21, 254, 150, 39, 193, 143, 8, 20, 20, 158, 232, 63, 227, 138, 148, 40, 81, 98, 0, 73, 201, 133, 195, 229, 230, 76, 54, 29, 217, 43, 184, 244, 136, 134, 183, 149, 92, 163, 101, 58, 66, 180 },
                            PasswordSalt = new byte[] { 191, 9, 213, 80, 243, 112, 51, 218, 229, 187, 71, 50, 152, 106, 31, 128, 36, 130, 126, 215, 73, 74, 121, 47, 110, 217, 199, 15, 165, 28, 239, 11, 146, 177, 92, 28, 125, 138, 93, 139, 111, 181, 214, 216, 97, 202, 204, 125, 189, 177, 65, 230, 101, 238, 185, 182, 36, 84, 2, 45, 56, 198, 92, 74, 96, 137, 21, 63, 121, 106, 151, 88, 105, 213, 158, 160, 67, 108, 4, 136, 192, 32, 4, 85, 227, 61, 119, 197, 41, 0, 247, 214, 167, 169, 80, 17, 63, 194, 140, 225, 240, 170, 146, 227, 155, 129, 118, 55, 142, 79, 255, 6, 198, 17, 48, 60, 254, 171, 122, 168, 129, 226, 151, 196, 241, 15, 63, 200 },
                            Phone = "0000000000000",
                            PhoneVerifiedStatus = true,
                            Description = "Selamlar"
                        },
                        new
                        {
                            Id = 5,
                            Email = "yusuf@tutor",
                            EmailVerifiedStatus = true,
                            FirstName = "Yusuf Mirac",
                            LastName = "Uyar",
                            PasswordHash = new byte[] { 224, 245, 232, 129, 98, 114, 202, 238, 157, 60, 11, 63, 186, 24, 175, 189, 247, 87, 35, 81, 66, 73, 21, 254, 150, 39, 193, 143, 8, 20, 20, 158, 232, 63, 227, 138, 148, 40, 81, 98, 0, 73, 201, 133, 195, 229, 230, 76, 54, 29, 217, 43, 184, 244, 136, 134, 183, 149, 92, 163, 101, 58, 66, 180 },
                            PasswordSalt = new byte[] { 191, 9, 213, 80, 243, 112, 51, 218, 229, 187, 71, 50, 152, 106, 31, 128, 36, 130, 126, 215, 73, 74, 121, 47, 110, 217, 199, 15, 165, 28, 239, 11, 146, 177, 92, 28, 125, 138, 93, 139, 111, 181, 214, 216, 97, 202, 204, 125, 189, 177, 65, 230, 101, 238, 185, 182, 36, 84, 2, 45, 56, 198, 92, 74, 96, 137, 21, 63, 121, 106, 151, 88, 105, 213, 158, 160, 67, 108, 4, 136, 192, 32, 4, 85, 227, 61, 119, 197, 41, 0, 247, 214, 167, 169, 80, 17, 63, 194, 140, 225, 240, 170, 146, 227, 155, 129, 118, 55, 142, 79, 255, 6, 198, 17, 48, 60, 254, 171, 122, 168, 129, 226, 151, 196, 241, 15, 63, 200 },
                            Phone = "0000000000000",
                            PhoneVerificationCode = "1234",
                            PhoneVerifiedStatus = false,
                            Description = "Merhaba arkadaslar"
                        });
                });

            modelBuilder.Entity("tutorium.Models.Booking", b =>
                {
                    b.HasOne("tutorium.Models.Course", "AffilatedCourse")
                        .WithMany("Bookings")
                        .HasForeignKey("AffilatedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tutorium.Models.Student", "AffilatedStudent")
                        .WithMany("Bookings")
                        .HasForeignKey("AffilatedStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedCourse");

                    b.Navigation("AffilatedStudent");
                });

            modelBuilder.Entity("tutorium.Models.Course", b =>
                {
                    b.HasOne("tutorium.Models.Tutor", "AffilatedTutor")
                        .WithMany("Courses")
                        .HasForeignKey("AffilatedTutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedTutor");
                });

            modelBuilder.Entity("tutorium.Models.Material", b =>
                {
                    b.HasOne("tutorium.Models.Course", "AffilatedCourse")
                        .WithMany("Materials")
                        .HasForeignKey("AffilatedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedCourse");
                });

            modelBuilder.Entity("tutorium.Models.Review", b =>
                {
                    b.HasOne("tutorium.Models.Course", "AffilatedCourse")
                        .WithMany("Reviews")
                        .HasForeignKey("AffilatedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tutorium.Models.Student", "AffilatedStudent")
                        .WithMany()
                        .HasForeignKey("AffilatedStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedCourse");

                    b.Navigation("AffilatedStudent");
                });

            modelBuilder.Entity("tutorium.Models.WhiteboardSave", b =>
                {
                    b.HasOne("tutorium.Models.Booking", "AffilatedBooking")
                        .WithMany("WhiteboardSaves")
                        .HasForeignKey("AffilatedBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffilatedBooking");
                });

            modelBuilder.Entity("tutorium.Models.Booking", b =>
                {
                    b.Navigation("WhiteboardSaves");
                });

            modelBuilder.Entity("tutorium.Models.Course", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Materials");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("tutorium.Models.Student", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("tutorium.Models.Tutor", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
